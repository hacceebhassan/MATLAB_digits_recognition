% Developed by M. Haseeb Hassan
% Neural Network using Hopfield Associative memory (Auto-associative) Demo

%% Generating the Data
close all;
clear all;
clc;
d(:,:,1)=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, 1, 1, 1, 1, 1, 1, -1, -1;
    -1, 1, 1, 1, -1, -1, 1, 1, 1, -1;
    -1, 1, 1, 1, -1, -1, 1, 1, 1, -1;
    -1, 1, 1, 1, -1, -1, 1, 1, 1, -1;
    -1, 1, 1, 1, -1, -1, 1, 1, 1, -1;
    -1, 1, 1, 1, -1, -1, 1, 1, 1, -1;
    -1, 1, 1, 1, -1, -1, 1, 1, 1, -1;
    -1, 1, 1, 1, -1, -1, 1, 1, 1, -1;
    -1, 1, 1, 1, -1, -1, 1, 1, 1, -1;
    -1, 1, 1, 1, -1, -1, 1, 1, 1, -1;
    -1, 1, 1, 1, -1, -1, 1, 1, 1, -1;
    -1, -1, 1, 1, 1, 1, 1, 1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1;];
d(:,:,2)=[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;
    -1, -1, -1, 1, 1, 1, 1, -1, -1, -1;];
d(:,:,3)=[ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1;
    1, 1, 1, 1, 1, 1, 1, 1, -1, -1;
    -1, -1, -1, -1, -1, 1, 1, 1, -1, -1;
    -1, -1, -1, -1, -1, 1, 1, 1, -1, -1;
    -1, -1, -1, -1, -1, 1, 1, 1, -1, -1;
    -1, -1, -1, -1, -1, 1, 1, 1, -1, -1;
    -1, -1, -1, -1, -1, 1, 1, 1, -1, -1;
    1, 1, 1, 1, 1, 1, 1, 1, -1, -1;
    1, 1, 1, 1, 1, 1, 1, 1, -1, -1;
    1, 1, 1, -1, -1, -1, -1, -1, -1, -1;
    1, 1, 1, -1, -1, -1, -1, -1, -1, -1;
    1, 1, 1, -1, -1, -1, -1, -1, -1, -1;
    1, 1, 1, -1, -1, -1, -1, -1, -1, -1;
    1, 1, 1, -1, -1, -1, -1, -1, -1, -1;
    1, 1, 1, 1, 1, 1, 1, 1, -1, -1;
    1, 1, 1, 1, 1, 1, 1, 1, -1, -1;]; 
d(:,:,4)=[ -1, -1, 1, 1, 1, 1, 1, 1, -1, -1;
    -1, -1, 1, 1, 1, 1, 1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, 1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, 1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, 1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, 1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, 1, 1, 1, -1;
    -1, -1, 1, 1, 1, 1, 1, 1, -1, -1;
    -1, -1, 1, 1, 1, 1, 1, 1, -1, -1;
    -1, -1, -1, -1, -1, -1, 1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, 1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, 1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, 1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, 1, 1, 1, -1;
    -1, -1, 1, 1, 1, 1, 1, 1, 1, -1;
    -1, -1, 1, 1, 1, 1, 1, 1, -1, -1;]; 
d(:,:,5)=[ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1;
    -1, 1, 1, -1, -1, -1, -1, 1, 1, -1;
    -1, 1, 1, -1, -1, -1, -1, 1, 1, -1;
    -1, 1, 1, -1, -1, -1, -1, 1, 1, -1;
    -1, 1, 1, -1, -1, -1, -1, 1, 1, -1;
    -1, 1, 1, -1, -1, -1, -1, 1, 1, -1;
    -1, 1, 1, -1, -1, -1, -1, 1, 1, -1;
    -1, 1, 1, 1, 1, 1, 1, 1, 1, -1;
    -1, 1, 1, 1, 1, 1, 1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1;
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1;]; 

%% Reshaping the data
d(d==0)=-1;
for i=1:size(d,3)
    A(i,:)=reshape(d(:,:,i),1,160);
end

%% Memory Matrix
N=size(A,2); T=zeros(N);
for i=1:size(d,3)
T=T+A(i,:)'*A(i,:);
end

%% Recall
for i=1:size(d,3)
    rec(i,:)=A(i,:)*T;
    I(:,:,i)=sign(reshape(rec(i,:),16,10));
end
figure
for i=1:size(d,3)
    subplot(2,size(d,3),i)
    imagesc(d(:,:,i))
    axis off
    title('Actual')
    subplot(2,size(d,3),i+size(d,3))
    imagesc(I(:,:,i))
    axis off
    title('Predicted')
end

%% Testing
% Adding 5% |gaussian| noise to digit '3'
J = imnoise(d(:,:,4),'gaussian',0,0.05);
figure;
subplot(1,2,1);
title('Image after adding noise');
imshow(J,'InitialMagnification',500);
B_noise=reshape(J,1,160);

% Recalling Noisy 'B'
B_noise=reshape(B_noise*T,16,10);
subplot(1,2,2);
title('Image after recall');
imshow(B_noise,'InitialMagnification',500);
